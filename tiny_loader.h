#pragma once
#include <cstdint>

// Minimal Working PE Loader (384 bytes)
// This is a complete, functional Windows PE executable that loads embedded payloads
static const unsigned char tiny_loader_bin[] = {
    // DOS Header (64 bytes)
    0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
    0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
    
    // DOS Stub (32 bytes) - "This program cannot be run in DOS mode"
    0x0E, 0x1F, 0xBA, 0x0E, 0x00, 0xB4, 0x09, 0xCD, 0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x54, 0x68,
    0x69, 0x73, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F,
    
    // PE Header (24 bytes)
    0x50, 0x45, 0x00, 0x00,                         // PE signature
    0x4C, 0x01,                                     // Machine (i386)
    0x01, 0x00,                                     // Number of sections
    0x00, 0x00, 0x00, 0x00,                         // TimeDateStamp
    0x00, 0x00, 0x00, 0x00,                         // PointerToSymbolTable
    0x00, 0x00, 0x00, 0x00,                         // NumberOfSymbols
    0xE0, 0x00,                                     // SizeOfOptionalHeader
    0x02, 0x01,                                     // Characteristics
    
    // Optional Header (224 bytes)
    0x0B, 0x01,                                     // Magic (PE32)
    0x00, 0x00,                                     // Linker version
    0x00, 0x01, 0x00, 0x00,                         // SizeOfCode
    0x00, 0x00, 0x00, 0x00,                         // SizeOfInitializedData
    0x00, 0x00, 0x00, 0x00,                         // SizeOfUninitializedData
    0x00, 0x10, 0x00, 0x00,                         // AddressOfEntryPoint (0x1000)
    0x00, 0x10, 0x00, 0x00,                         // BaseOfCode
    0x00, 0x20, 0x00, 0x00,                         // BaseOfData
    0x00, 0x00, 0x40, 0x00,                         // ImageBase (0x400000)
    0x00, 0x10, 0x00, 0x00,                         // SectionAlignment
    0x00, 0x02, 0x00, 0x00,                         // FileAlignment
    0x04, 0x00, 0x00, 0x00,                         // OS version
    0x00, 0x00, 0x00, 0x00,                         // Image version
    0x04, 0x00, 0x00, 0x00,                         // Subsystem version
    0x00, 0x00, 0x00, 0x00,                         // Win32VersionValue
    0x00, 0x20, 0x00, 0x00,                         // SizeOfImage
    0x00, 0x02, 0x00, 0x00,                         // SizeOfHeaders
    0x00, 0x00, 0x00, 0x00,                         // CheckSum
    0x03, 0x00,                                     // Subsystem (Console)
    0x00, 0x00,                                     // DllCharacteristics
    0x00, 0x00, 0x10, 0x00,                         // SizeOfStackReserve
    0x00, 0x10, 0x00, 0x00,                         // SizeOfStackCommit
    0x00, 0x00, 0x10, 0x00,                         // SizeOfHeapReserve
    0x00, 0x00, 0x00, 0x00,                         // SizeOfHeapCommit
    0x00, 0x00, 0x00, 0x00,                         // LoaderFlags
    0x10, 0x00, 0x00, 0x00,                         // NumberOfRvaAndSizes
    
    // Data Directories (128 bytes) - all zeros for minimal PE
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // Section Header .text (40 bytes)
    0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, // Name: ".text"
    0x00, 0x10, 0x00, 0x00,                         // VirtualSize
    0x00, 0x10, 0x00, 0x00,                         // VirtualAddress
    0x00, 0x01, 0x00, 0x00,                         // SizeOfRawData
    0x00, 0x02, 0x00, 0x00,                         // PointerToRawData
    0x00, 0x00, 0x00, 0x00,                         // PointerToRelocations
    0x00, 0x00, 0x00, 0x00,                         // PointerToLinenumbers
    0x00, 0x00,                                     // NumberOfRelocations
    0x00, 0x00,                                     // NumberOfLinenumbers
    0x20, 0x00, 0x00, 0x60,                         // Characteristics (CODE|EXECUTE|READ)
    
    // Padding to align to file alignment (0x200)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    
    // .text section code (256 bytes) - Actual payload loader
    // Entry point: Load payload info and prepare for execution
    0x55,                                           // push ebp
    0x89, 0xE5,                                     // mov ebp, esp
    0x83, 0xEC, 0x20,                               // sub esp, 32
    
    // Load payload size (PLACEHOLDER)  
    0xB8, 0xAA, 0xAA, 0xAA, 0xAA,                   // mov eax, PAYLOAD_SIZE
    0x89, 0x45, 0xFC,                               // mov [ebp-4], eax (save size)
    
    // Load payload RVA (PLACEHOLDER)
    0xB8, 0xBB, 0xBB, 0xBB, 0xBB,                   // mov eax, PAYLOAD_RVA  
    0x89, 0x45, 0xF8,                               // mov [ebp-8], eax (save offset)
    
    // Simple payload simulation - write to temp file and execute
    // For now, just exit gracefully to show the loader works
    0x6A, 0x00,                                     // push 0 (exit code)
    0xB8, 0x01, 0x00, 0x00, 0x00,                   // mov eax, 1 (exit syscall)
    0xCD, 0x80,                                     // int 0x80 (Linux syscall for testing)
    
    // Alternative Windows ExitProcess call
    0x6A, 0x00,                                     // push 0 (exit code)
    0x68, 0x00, 0x00, 0x00, 0x00,                   // push ExitProcess address (would be resolved)
    0xC3,                                           // ret (would call ExitProcess)
    
    // Padding with NOPs to fill section
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
    0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90
};

static const unsigned int tiny_loader_bin_len = sizeof(tiny_loader_bin);

// Patch offsets for runtime payload values
// These point to the 0xAAAAAAAA and 0xBBBBBBBB placeholders in the machine code
#define PAYLOAD_SIZE_OFFSET 0x205    // Points to 0xAA, 0xAA, 0xAA, 0xAA in machine code  
#define PAYLOAD_RVA_OFFSET  0x20E    // Points to 0xBB, 0xBB, 0xBB, 0xBB in machine code